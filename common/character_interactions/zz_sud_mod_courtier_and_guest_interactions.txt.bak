invite_to_court_interaction = {
	category = interaction_category_vassal

	
	desc = invite_to_court_interaction_desc
	
	is_shown = {
		scope:recipient = {
			NOR = {
				is_courtier_of = scope:actor
				is_foreign_court_guest = yes
				AND = {
					exists = host
					host = scope:actor
				}
				is_ruler = yes
			}	
		}
	}


	is_valid_showing_failures_only = {
		scope:recipient = {
			NOR = {
				custom_description = {
					text = is_not_wandering_child
					subject = scope:recipient
					OR = {
						AND = {
							is_adult = no
							is_pool_character = no
						}
						AND = {
							is_adult = no
							NOT = { is_close_or_extended_family_of = scope:actor }
						}
					}
				}
				is_imprisoned = yes
				is_theocratic_lessee = yes
				trigger_if = {
					limit = {
						exists = host
						NOT = { is_player_heir_of = scope:actor }
					}
					is_player_heir_of = host
				}
				trigger_if = {
					limit = { exists = host }
					is_consort_of = host
				}
				trigger_if = {
					limit = { exists = host }
					host = {
						pressing_claim_of_character_trigger = { CHARACTER = scope:recipient }
					}
				}

				#Do they have the "wrong" marriage type and the spouse is employed?
				custom_description = {
					text = is_married_matrilineally_and_spouse_is_dominant_partner
					subject = scope:recipient
					any_spouse = {
						is_female = yes
						matrilinear_marriage = yes
						exists = host
						host = scope:recipient.host
						save_temporary_scope_as = spouse
						OR = { #Is employed in some way
							is_councillor_of = scope:recipient.host
							is_knight_of = scope:recipient.host
							any_relation = {
								type = ward
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = guardian
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = mentor
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = student
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							scope:recipient.host = {
								has_relation_court_physician = scope:spouse
							}
						}
					}
				}
				custom_description = {
					text = is_married_patrilineally_and_spouse_is_dominant_partner
					subject = scope:recipient
					any_spouse = {
						is_male = yes
						patrilinear_marriage = yes
						exists = host
						host = scope:recipient.host
						save_temporary_scope_as = spouse
						OR = { #Is employed in some way
							is_councillor_of = scope:recipient.host
							is_knight_of = scope:recipient.host
							any_relation = {
								type = ward
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = guardian
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = mentor
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = student
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							scope:recipient.host = {
								has_relation_court_physician = scope:spouse
							}
						}
					}
				}
				custom_description = {
					text = "is_escaped_prisoner"
					subject = scope:recipient
					OR = {
						has_opinion_modifier = {
							modifier = attempted_imprisonment_opinion
							target = scope:actor
						}
						has_opinion_modifier = {
							modifier = treasonous_imprison_refusal
							target = scope:actor
						}
						AND = {
							exists = var:escaped_imprisonment_from
							var:escaped_imprisonment_from = scope:actor
						}
					}
				}
			}
		}
	}

	on_accept = {
		hidden_effect = {
			if = {
				limit = {
					exists = scope:recipient.liege
				}
				scope:recipient.liege = {
					send_interface_message = {
						type = event_generic_neutral
						title = msg_courtier_left_court_interaction_title
						
						right_icon = scope:recipient

						show_as_tooltip = {
							remove_courtier_or_guest = scope:recipient
						}
					}
				}
			}
		}
		
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = invite_to_court_interaction_notification
				right_icon = scope:recipient

				scope:recipient = {
					every_traveling_family_member = {
						scope:actor = { recruit_courtier = prev }
						hidden_effect = {
							return_to_court = yes
						}
					}
				}

				if = {
					limit = { always = scope:hook }
					scope:actor = {
						use_hook = scope:recipient
					}
				}

				scope:actor = {
					stress_impact = {
						shy = minor_stress_impact_gain
					}
				}
			}
		}

		hidden_effect = {
			if = {
				limit = {
					exists = scope:recipient.liege
				}
				scope:recipient.liege = {
					send_interface_message = {
						type = event_generic_neutral
						title = msg_courtier_left_court_interaction_title
						
						right_icon = scope:recipient

						show_as_tooltip = {
							remove_courtier_or_guest = scope:recipient
						}
					}
				}
			}
		}
	}

	ai_accept = {
 		base = -50

 		#Opinions
 		opinion_modifier = {
 			trigger = {
 				exists = liege
 				is_courtier_of = liege
 			}
 			opinion_target = liege
 			multiplier = -0.5
 			step = 5
 			max = 25
 		}
 		opinion_modifier = {
 			opinion_target = scope:actor
 			multiplier = 0.75
 			step = 5
 			max = 75
 		}

 		#Current roles
 		modifier = {
 			is_knight = yes
 			add = -20
 			desc = AI_MY_LIEGES_KNIGHT
 		}
 		modifier = {
 			is_commanding_army = yes
 			add = -30
 			desc = AI_MY_LIEGES_COMMANDER
 		}
 		modifier = {
 			is_councillor = yes
 			add = -40
 			desc = AI_ON_THE_COUNCIL
 		}

 		#Relations & relatives (with actor)
 		modifier = {
 			has_relation_lover = scope:actor
 			add = 100
 			desc = AI_YOUR_LOVER
 		}

 		modifier = {
 			has_relation_friend = scope:actor
 			add = 75
 			desc = AI_YOUR_FRIEND
 		}

 		modifier = {
 			is_child_of = scope:actor
 			add = 160
 			desc = AI_YOUR_CHILD
 		}

 		modifier = {
 			this.dynasty.dynast = scope:actor
 			add = 30
 			desc = AI_YOU_ARE_THE_DYNAST
 		}

 		modifier = {
 			this.house.house_head = scope:actor
 			add = 30
 			desc = AI_YOU_ARE_THE_HOUSE_HEAD
 		}

 		modifier = {
 			NOT = { is_child_of = scope:actor }
 			is_close_family_of = scope:actor
 			add = 75
 			desc = AI_YOUR_RELATIVE
 		}

 		modifier = {
 			is_spouse_of = scope:actor
 			add = 160
 			desc = AI_YOUR_SPOUSE
 		}

 		#Relations & relatives (with host)
 		modifier = {
 			exists = liege
 			has_relation_lover = liege
 			add = -100
 			desc = AI_THEIR_LOVER
 		}

 		modifier = {
 			exists = liege
 			has_relation_friend = liege
 			add = -75
 			desc = AI_THEIR_FRIEND
 		}

 		modifier = {
 			exists = liege
 			is_child_of = liege
 			add = -100
 			desc = AI_THEIR_CHILD
 		}

 		modifier = {
 			exists = liege
 			NOT = { is_child_of = liege }
 			is_close_family_of = liege
 			add = -75
 			desc = AI_THEIR_RELATIVE
 		}

 		#Family (at location)
 		modifier = {
 			exists = location
 			any_consort_not_in_traveling_family_trigger = yes
 			desc = AI_LEAVING_MY_SPOUSE
 			add = -100
 		}

 		modifier = {
 			exists = location
 			any_child_not_in_traveling_family_trigger = yes
 			desc = AI_LEAVING_MY_CHILD
 			add = -100
 		}

 		modifier = {
 			add = -50
 			desc = AI_MARRIED_MATRILINIALLY
 			is_married = yes
 			is_male = yes
 			any_spouse = {
 				matrilinear_marriage = yes
 				host = scope:recipient.host
 			}
 		}

 		modifier = {
 			add = -50
 			desc = AI_MARRIED_PATRILINIALLY
 			is_married = yes
 			is_female = yes
 			any_spouse = {
 				patrilinear_marriage = yes
 				host = scope:recipient.host
 			}
 		}

 		modifier = {
 			add = -500
 			desc = AI_WANDERLUST
			is_child_of = scope:actor
 			has_character_modifier = lust_for_adventure
 		}
	}


	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}



hire_court_physician_interaction = {
	category = interaction_category_vassal

	desc = hire_court_physician_interaction_desc

	is_shown = {
		scope:recipient = {
			is_courtier_of = scope:actor
			is_adult = yes
		}
		scope:actor = {
			NOT = {
				any_relation = {
					type = court_physician
					this = scope:recipient
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			can_be_court_physician_of = { EMPLOYER = scope:actor }
		}
	}

	cost = {
		gold = 10
	}
	
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = msg_hired_court_physician_interaction_title
				right_icon = scope:recipient

				set_court_physician_effect = {
					PHYSICIAN = scope:recipient
					EMPLOYER = scope:actor
				}
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = grateful_opinion
				opinion = 15 #Should match the amount lost when fired so it's not a way to farm opinion
			}
			add_gold = 10
		}
	}
	
	auto_accept = yes
}

fire_court_physician_interaction = {
	category = interaction_category_vassal

	desc = fire_court_physician_interaction_desc

	is_shown = {
		scope:recipient = {
			is_courtier_of = scope:actor
		}
		scope:actor = {
			any_relation = {
				type = court_physician
				this = scope:recipient
			}
		}
	}

	cost = {

	}
	
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = msg_fired_court_physician_interaction_title
				right_icon = scope:recipient

				fire_court_physician_effect = {
					PHYSICIAN = scope:recipient
					EMPLOYER = scope:actor
				}
			}
		}
	}
	
	auto_accept = yes
}
